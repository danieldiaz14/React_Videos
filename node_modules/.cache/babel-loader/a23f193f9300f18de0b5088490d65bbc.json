{"ast":null,"code":"import _regeneratorRuntime from \"/Users/danieldiaz/Desktop/React_Videos/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/danieldiaz/Desktop/React_Videos/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport youtube from '../apis/youtube';\nimport { FETCH_DEFAULT, FETCH_SEARCH, SELECT_VIDEO } from './types';\nexport var fetch_default = function fetch_default() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return youtube.get('/search', {\n                  params: {\n                    q: 'League of Legends'\n                  }\n                });\n\n              case 2:\n                response = _context.sent;\n                dispatch({\n                  type: FETCH_DEFAULT,\n                  payload: response.data.items\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetch_search = function fetch_search(term) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return youtube.get('/search', {\n                  params: {\n                    q: term\n                  }\n                });\n\n              case 2:\n                response = _context2.sent;\n                dispatch({\n                  type: FETCH_SEARCH,\n                  payload: response.data.items\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var select_video = function select_video(video) {\n  return function (dispatch) {\n    dispatch({\n      type: SELECT_VIDEO,\n      payload: video\n    });\n  };\n};","map":{"version":3,"sources":["/Users/danieldiaz/Desktop/React_Videos/src/actions/index.js"],"names":["youtube","FETCH_DEFAULT","FETCH_SEARCH","SELECT_VIDEO","fetch_default","dispatch","get","params","q","response","type","payload","data","items","fetch_search","term","select_video","video"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,iBAApB;AAEA,SACIC,aADJ,EAEIC,YAFJ,EAGIC,YAHJ,QAIO,SAJP;AAOA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACRL,OAAO,CAACM,GAAR,CAAY,SAAZ,EAAuB;AAC1CC,kBAAAA,MAAM,EAAE;AACJC,oBAAAA,CAAC,EAAE;AADC;AADkC,iBAAvB,CADQ;;AAAA;AACzBC,gBAAAA,QADyB;AAM/BJ,gBAAAA,QAAQ,CAAC;AAACK,kBAAAA,IAAI,EAAET,aAAP;AAAsBU,kBAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;AAA7C,iBAAD,CAAR;;AAN+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;AASP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAI,kBAAMV,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACTL,OAAO,CAACM,GAAR,CAAY,SAAZ,EAAuB;AAC1CC,kBAAAA,MAAM,EAAE;AACJC,oBAAAA,CAAC,EAAEO;AADC;AADkC,iBAAvB,CADS;;AAAA;AAC1BN,gBAAAA,QAD0B;AAMhCJ,gBAAAA,QAAQ,CAAC;AAACK,kBAAAA,IAAI,EAAER,YAAP;AAAqBS,kBAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;AAA5C,iBAAD,CAAR;;AANgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;AASP,OAAO,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK;AAAA,SAAI,UAAAZ,QAAQ,EAAI;AAC7CA,IAAAA,QAAQ,CAAC;AAACK,MAAAA,IAAI,EAAEP,YAAP;AAAqBQ,MAAAA,OAAO,EAAEM;AAA9B,KAAD,CAAR;AACH,GAFgC;AAAA,CAA1B","sourcesContent":["import youtube from '../apis/youtube';\n\nimport {\n    FETCH_DEFAULT,\n    FETCH_SEARCH,\n    SELECT_VIDEO\n} from './types';\n\n\nexport const fetch_default = () => async dispatch => {\n    const response = await youtube.get('/search', {\n        params: {\n            q: 'League of Legends'\n        }\n    });\n    dispatch({type: FETCH_DEFAULT, payload: response.data.items});\n};\n\nexport const fetch_search = term => async dispatch => {\n    const response = await youtube.get('/search', {\n        params: {\n            q: term\n        }\n    });\n    dispatch({type: FETCH_SEARCH, payload: response.data.items});\n};\n\nexport const select_video = video => dispatch => {\n    dispatch({type: SELECT_VIDEO, payload: video})\n};"]},"metadata":{},"sourceType":"module"}